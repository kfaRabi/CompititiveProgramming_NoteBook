#include<stdio.h>

long ans[7502] = {0};
int k = 7500;

int sive(int len)
{
    ans [0] = 1;
    int i = 0, j = 0, coin[] = {1, 5, 10, 25, 50};

    for(i = 0; i < 5; i++)
    {
        for(j = coin[i]; j < len; j++)
        {
            ans[j] += ans[j - coin[i]];
        }
    }
    return 0;
}

int main()
{
    sive(k);
    int n;
    while(scanf("%d",&n) != EOF)
        printf("%d\n",ans[n]);
    return 0;
}
/**********************************************************************/


#include <stdio.h>
#include <string.h>
using namespace std;
#define mod 100000007
long long  f(long long i, long long mak);
 
long long coin, a[ 52 ], c[ 52 ], cou, dp[ 52 ][ 1002 ], make;
 
int main()
{
    int T, kag = 0;
    scanf("%d", &T);
    while(T--)
    {
        scanf("%lld %lld", &coin, &make);
        for(int i = 1; i <= coin; i++) scanf("%lld", &a[ i ]);
        for(int i = 1; i <= coin; i++) scanf("%lld", &c[ i ]);
        memset(dp, -1, sizeof(dp)); cou = 0;
        printf("Case %d: %lld\n", ++kag, f(1, 0) % mod);
    }
    return 0;
}
long long f(long long i, long long mak)
{
    if(i  - 1 >= coin)
    {
        if(mak == make) return 1;
        return 0;
    }
    if(make == mak) return 1;
    if(mak > make) return 0;
    if(dp[ i ][ mak ] != -1) return dp[ i ][ mak ];
    int x = 0, y = 0;
    for(int take = 1; take <= c[ i ]; take++)
    {
        if(mak + (a[ i ]*take) <= make)
        {
            x += f(i + 1, mak + (a[ i ] * take)) % mod;
        }
        else break;
    }
    y += f(i + 1, mak) % mod;
    return dp[ i ][ mak ] = (x + y) % mod;
}